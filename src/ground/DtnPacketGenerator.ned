//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package flora.ground;

import inet.applications.contract.IApp;

simple DtnPacketGenerator
{
    parameters:
        @display("i=block/app");
        int numGroundLinks = default(40);
        bool enable = default(false); // Traffic Generator Enabled
        string destinationEid = default("1"); // Generated Bundles destination EiD
        string bundlesNumber = default("1"); // Number of Bundles to Generate
        string size = default("1024"); // Generated Bundles Size in Bytes
        string start = default("0"); // tiempo de generaci√≥n de mensajes
        double interval = default(0); // Bundles Generation Interval in Secs
        double ttl = default(9000000); // Generated Bundles Time to Live in Secs
        bool returnToSender = default(true);
        bool critical = default(false);
        bool custodyTransfer = default(false);
        
        // Signals and Statistics
        @signal[appBundleSent];
        @signal[appBundleReceived];
        @signal[appBundleReceivedHops];
        @signal[appBundleReceivedDelay];
        @signal[packetSent](type=inet::Packet);
        @signal[packetReceived](type=inet::Packet);
        
        @statistic[packetSent](title="packets sent"; source=packetSent; record=count,"sum(packetBytes)","vector(packetBytes)"; interpolationmode=none);
        @statistic[packetReceived](title="packets received"; source=packetReceived; record=count,"sum(packetBytes)","vector(packetBytes)"; interpolationmode=none);
        @statistic[appBundleSent](title="appBundleSent"; source="appBundleSent"; record=count; interpolationmode=none);
        @statistic[appBundleReceived](title="appBundleReceived"; source="appBundleReceived"; record=count; interpolationmode=none);
        @statistic[appBundleReceivedHops](title="appBundleReceivedHops"; source="appBundleReceivedHops"; record=mean,max,min,histogram; interpolationmode=none);
        @statistic[appBundleReceivedDelay](title="appBundleReceivedDelay"; source="appBundleReceivedDelay"; record=mean,max,min,histogram; interpolationmode=none);
        
    gates:
        inout satelliteLink[numGroundLinks] @labels(satelliteLink);
        input transportIn;
        output transportOut;
}